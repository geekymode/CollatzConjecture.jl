var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"#CollatzConjecture","page":"Home","title":"CollatzConjecture","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CollatzConjecture.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for CollatzConjecture!","category":"page"},{"location":"#What-is-CollatzConjecture.jl?","page":"Home","title":"What is CollatzConjecture.jl?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CollatzConjecture is a formal TBD.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Encoding: textbfg=G textbfb\nDecoding: textbfb=B textbfg","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Tip\nThis is still under active development.","category":"page"},{"location":"#Resources-for-getting-started","page":"Home","title":"Resources for getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are a few ways to get started with CollatzConjecture:","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Open a Julia session and enter","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"CollatzConjecture\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"this will download the package and all the necessary dependencies for you. Next you can import the package with","category":"page"},{"location":"","page":"Home","title":"Home","text":"and you are ready to go.","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using CollatzConjecture","category":"page"},{"location":"#CollatzConjecture.astro_intensity-NTuple{5, Any}","page":"Home","title":"CollatzConjecture.astro_intensity","text":"astro_intensity(l, s, r, h, g)\n\nCalculate RGB color values for astronomical intensity visualization.\n\nThis function computes RGB color values based on astronomical parameters using a  mathematical transformation that combines lightness, saturation, and spectral  characteristics. The calculation involves trigonometric functions and matrix-like  operations to produce realistic color representations for astronomical data.\n\nArguments\n\nl::Real: Lightness parameter (typically in range [0,1])\ns::Real: Saturation parameter \nr::Real: Radial or spectral parameter\nh::Real: Hue amplitude parameter\ng::Real: Gamma correction exponent\n\nReturns\n\nVector{Float64}: RGB color values as a 3-element vector [R, G, B], clamped to [0,1]\n\nExamples\n\njulia> astro_intensity(0.5, 1.0, 0.2, 0.8, 2.0)\n3-element Vector{Float64}:\n 0.4123\n 0.2847\n 0.6891\n\njulia> astro_intensity(0.8, 0.5, 0.1, 1.2, 1.5)\n3-element Vector{Float64}:\n 0.7234\n 0.5678\n 0.8901\n\njulia> astro_intensity(0.2, 2.0, 0.5, 0.6, 1.8)\n3-element Vector{Float64}:\n 0.1456\n 0.0892\n 0.3278\n\nNotes\n\nThe function uses specific transformation coefficients optimized for astronomical  color representation:\n\nRed channel: -0.14861 * cos(ψ) + 1.78277 * sin(ψ)\nGreen channel: -0.29227 * cos(ψ) - 0.90649 * sin(ψ)  \nBlue channel: 1.97294 * cos(ψ)\n\nWhere ψ = 2π * (s/3 + r * l) represents the phase angle for color calculation.\n\nAll output values are clamped to the valid color range [0,1].\n\n\n\n\n\n","category":"method"},{"location":"#CollatzConjecture.collatz_length-Tuple{Any}","page":"Home","title":"CollatzConjecture.collatz_length","text":"collatz_length(n)\n\nCalculate the length of the Collatz sequence for a given positive integer.\n\nThe Collatz sequence (also known as the 3n+1 problem or hailstone sequence) is generated by repeatedly applying the following rules:\n\nIf the number is even: divide by 2  \nIf the number is odd: multiply by 3 and add 1\nContinue until reaching 1\n\nThis function counts the total number of steps in the sequence, including the final 1.\n\nArguments\n\nn::Integer: A positive integer to start the Collatz sequence\n\nReturns\n\nInteger: The total length of the Collatz sequence (number of terms including the starting number and final 1)\n\nExamples\n\njulia> collatz_length(1)\n1\n\njulia> collatz_length(3)\n8\n\njulia> collatz_length(4)\n3\n\njulia> collatz_length(7)\n17\n\njulia> collatz_length(16)\n5\n\nNotes\n\nThe Collatz conjecture states that this sequence will always eventually reach 1 for any positive integer, though this has not been proven for all numbers.\n\n\n\n\n\n","category":"method"},{"location":"#CollatzConjecture.collatz_sequence-Tuple{Any}","page":"Home","title":"CollatzConjecture.collatz_sequence","text":"collatz_sequence(n::Integer) -> Vector{Int}\n\nGenerate the complete Collatz sequence starting from a given positive integer.\n\nThe Collatz conjecture states that for any positive integer n, repeatedly applying the rule (n/2 if even, 3n+1 if odd) will eventually reach 1. This function returns the entire sequence from the starting number to 1.\n\nArguments\n\nn::Integer: Starting positive integer (must be > 0)\n\nReturns\n\nVector{Int}: Complete sequence from n to 1 (inclusive)\n\nExamples\n\njulia> collatz_sequence(3)\n8-element Vector{Int64}:\n 3\n 10\n 5\n 16\n 8\n 4\n 2\n 1\n\njulia> collatz_sequence(7)\n17-element Vector{Int64}:\n 7\n 22\n 11\n 34\n 17\n 52\n 26\n 13\n 40\n 20\n 10\n 5\n 16\n 8\n 4\n 2\n 1\n\njulia> length(collatz_sequence(27))\n112\n\nNotes\n\nThe conjecture remains unproven, but has been verified for very large numbers\nSome sequences can become quite long before reaching 1\nThe function will run indefinitely if the conjecture is false for the input\n\nThrows\n\nArgumentError: if n ≤ 0\n\nSee Also\n\nWikipedia: Collatz conjecture\nOEIS A006577: Number of steps in Collatz sequence\n\n\n\n\n\n","category":"method"},{"location":"#CollatzConjecture.collatz_stopping_time-Tuple{Any}","page":"Home","title":"CollatzConjecture.collatz_stopping_time","text":"collatz_stopping_time(n)\n\nCalculate the stopping time of the Collatz sequence for a given positive integer.\n\nThe stopping time is the number of steps required to reach 1 from the starting number n in the Collatz sequence. The Collatz sequence is generated by repeatedly applying:\n\nIf the number is even: divide by 2  \nIf the number is odd: multiply by 3 and add 1\nContinue until reaching 1\n\nThis function counts only the transformation steps, excluding the final 1.\n\nArguments\n\nn::Integer: A positive integer to start the Collatz sequence\n\nReturns\n\nInteger: The number of steps required to reach 1 (stopping time)\n\nExamples\n\njulia> collatz_stopping_time(1)\n0\n\njulia> collatz_stopping_time(2)\n1\n\njulia> collatz_stopping_time(3)\n7\n\njulia> collatz_stopping_time(4)\n2\n\njulia> collatz_stopping_time(7)\n16\n\njulia> collatz_stopping_time(16)\n4\n\nNotes\n\nThe stopping time differs from sequence length by not counting the starting number or final 1. For example, the sequence 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 has stopping time 7.\n\nSee also: collatz_length\n\n\n\n\n\n","category":"method"},{"location":"#CollatzConjecture.test_collatz_connectivity","page":"Home","title":"CollatzConjecture.test_collatz_connectivity","text":"test_collatz_connectivity(max_n = 20)\n\nTest and analyze the connectivity of Collatz sequences for integers from 1 to max_n.\n\nThis function generates Collatz sequences for all integers from 1 to max_n and analyzes how they interconnect by finding shared vertices (numbers that appear in multiple sequences). It provides insights into the tree-like structure of the Collatz conjecture.\n\nArguments\n\nmax_n::Integer: Maximum starting number to test (default: 20)\n\nReturns\n\nTuple: A tuple containing:\nsequences: Vector of tuples (n, sequence) for each starting number\nvertex_counts: Dictionary mapping each vertex to the sequences that contain it\n\nExamples\n\njulia> sequences, vertex_counts = test_collatz_connectivity(5);\n=== Testing Collatz sequence connectivity ===\n1: [1] (length: 1)\n2: [2, 1] (length: 2)\n3: [3, 10, 5, 16, 8, 4, 2, 1] (length: 8)\n4: [4, 2, 1] (length: 3)\n5: [5, 16, 8, 4, 2, 1] (length: 6)\n\nAll unique vertices: [1, 2, 3, 4, 5, 8, 10, 16]\n\nShared vertices (vertex -> sequences that contain it):\n 1 appears in sequences: [1, 2, 3, 4, 5]\n 2 appears in sequences: [2, 3, 4, 5]\n 4 appears in sequences: [3, 4, 5]\n 8 appears in sequences: [3, 5]\n 16 appears in sequences: [3, 5]\n\njulia> test_collatz_connectivity(10);\n\nNotes\n\nThis function demonstrates the tree-like structure of Collatz sequences, where different starting numbers eventually merge into common paths. All sequences eventually reach 1, supporting the Collatz conjecture for the tested range.\n\nThe function requires collatz_sequence(n) to be defined, which should return the complete Collatz sequence starting from n.\n\nSee also: collatz_sequence, collatz_length, collatz_stopping_time\n\n\n\n\n\n","category":"function"}]
}
